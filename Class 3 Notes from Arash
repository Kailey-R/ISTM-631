{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ISTM 631 5/18/2020.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Kailey-R/ISTM-631/blob/master/Class%203%20Notes%20from%20Arash\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GTRmBqAmUW1S",
        "colab_type": "text"
      },
      "source": [
        "any comparasion between two logical statement is a logical operation and results in True or False outcome"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rYuZuiGzQ9E4",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Condition Equal\n",
        "\n",
        "a = 5\n",
        "B  = (a == 6)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_xXlfiHGUw85",
        "colab_type": "code",
        "outputId": "460e4de5-bb8a-4721-d3f3-0a036e7c4403",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "type(B)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "bool"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wfYDIwRYVL2K",
        "colab_type": "code",
        "outputId": "02e155e4-8ed1-4a70-b46c-d8feaa2da428",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Greater than Sign\n",
        "\n",
        "i = 6\n",
        "i > 5"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ipwKKzAxVNb4",
        "colab_type": "code",
        "outputId": "857b1e56-c865-464c-857b-5cc6faebd091",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "i != 4"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "N_6gHVvrVR3M",
        "colab_type": "code",
        "outputId": "6a9221c6-0988-4402-dcbe-6786d5694afc",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "C = ('A' > 'AA')\n",
        "\n",
        "print(C)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "False\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xvo59-bEVhoJ",
        "colab_type": "text"
      },
      "source": [
        "ASCII code\n",
        "\n",
        "Branching --> if statements\n",
        "\n",
        "elif\n",
        "\n",
        "else "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dv7GWjBnW0ue",
        "colab_type": "text"
      },
      "source": [
        "![alt text](https://s3-api.us-geo.objectstorage.softlayer.net/cf-courses-data/CognitiveClass/PY0101EN/Chapter%203/Images/CondsTable.png)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1H9WC8XxW7H6",
        "colab_type": "text"
      },
      "source": [
        "Truth table"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "p0qdkAWoXedq",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "year  = 1983\n",
        "\n",
        "A = (year > 1979)\n",
        "\n",
        "B = (year < 1990)\n",
        "\n",
        "if A and B:\n",
        "  print('year is in the 90s')\n",
        "else print('not in 90s')  "
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "tjewwu_fYG_t",
        "colab_type": "text"
      },
      "source": [
        "loops --> when we want to repeat a bunch of codes more than once\n",
        "\n",
        "difference between for and while loops\n",
        "\n",
        "for loops are determinate so we know how many times we run the loop\n",
        "\n",
        "while loops are conditional and till the condition has not met will be ran\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mYhjDB7RZOAm",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(0,8):\n",
        "  print(i)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ps9TO3Zzc1Xu",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "for i in range(0,0):\n",
        "  print(i)"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "DNnXfUBtZ-yx",
        "colab_type": "code",
        "outputId": "2f18c4e4-3aed-4999-fc06-f3de56b98eba",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "years = [1990,1991,1992]\n",
        "\n",
        "for i in range(len(years)):\n",
        "  print(years[i])\n",
        "  print(type(i))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1990\n",
            "<class 'int'>\n",
            "1991\n",
            "<class 'int'>\n",
            "1992\n",
            "<class 'int'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IqajqoXmaUbL",
        "colab_type": "text"
      },
      "source": [
        "write the previous code using while"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KRArcKRWa3S-",
        "colab_type": "code",
        "outputId": "e2d7ae5f-30f9-412a-f767-60a35d9a6552",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 119
        }
      },
      "source": [
        "years = ['1990','1991','1992']\n",
        "\n",
        "for i in years:\n",
        "  print(i)\n",
        "  print(type(i))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1990\n",
            "<class 'str'>\n",
            "1991\n",
            "<class 'str'>\n",
            "1992\n",
            "<class 'str'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5zJXkO91bqd8",
        "colab_type": "code",
        "outputId": "8a35437e-ae73-4a32-a23b-ea0442820b50",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "for j, year in enumerate(years):\n",
        "  print(j,year)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0 1990\n",
            "1 1991\n",
            "2 1992\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-a54PZeqeDLK",
        "colab_type": "code",
        "outputId": "c82831b5-e343-4d53-e58c-fcc82eb651e8",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "type(year)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "str"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ax3ek1_FcOVH",
        "colab_type": "code",
        "outputId": "942cb803-d670-43d3-914b-e17f63fd6974",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 102
        }
      },
      "source": [
        "# While Loop Example\n",
        "\n",
        "dates = [1, 1982, 1980, 1973, 2000]\n",
        "\n",
        "i = 0\n",
        "year = 0\n",
        "\n",
        "while(year != 1973):\n",
        "    year = dates[i]\n",
        "    i = i + 1 #updating the index vriable to refer to the next value on the list  i +=1\n",
        "    print(year)\n",
        "\n",
        "print(\"It took \", i ,\"repetitions to get out of loop.\")"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1\n",
            "1982\n",
            "1980\n",
            "1973\n",
            "It took  4 repetitions to get out of loop.\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iQQvrID3d7C8",
        "colab_type": "code",
        "outputId": "71a4d086-bdc3-4b82-c835-3d3fb3631fa2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "type(year)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "int"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "83dDoJrLeN_v",
        "colab_type": "text"
      },
      "source": [
        "scope"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7zPn6b2jfG6Y",
        "colab_type": "text"
      },
      "source": [
        "pi/4 = 1-1/3 + 1/5 -1/7 + ....\n",
        "\n",
        "\n",
        "Write a program that allows the user to specify the number of iterations used in this approximation and that displays the resulting value.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CanKSK--fudo",
        "colab_type": "text"
      },
      "source": [
        ""
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HHRSfYcGfuqu",
        "colab_type": "code",
        "outputId": "a7eb5746-9dee-4202-80f1-26be3231fc61",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "'''program #1this is to approximate pi'''\n",
        "\n",
        "iterations = int(input('enter the number of iterations: '))\n",
        "\n",
        "\n",
        "pioverfour = 0\n",
        "\n",
        "numerator = 1\n",
        "\n",
        "denominator = 1\n",
        "\n",
        "for count in range(iterations):\n",
        "  pioverfour = pioverfour + numerator/denominator\n",
        "  numerator = -numerator\n",
        "  denominator += 2\n",
        "\n",
        "print('the approximation of pi is ', pioverfour*4)  \n",
        "\n",
        "\n"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter the number of iterations: 100\n",
            "the approximation of pi is  3.1315929035585537\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ey2ROMcthYrb",
        "colab_type": "code",
        "outputId": "a92db418-2152-42c4-d645-79e20657ba75",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "import math\n",
        "\n",
        "print(math.pi)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3.141592653589793\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5-1qYCfIhiS5",
        "colab_type": "text"
      },
      "source": [
        "how many iteration of program #1 should we run in order to get the approximation to 1% precision"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "guJSPqwUj-G5",
        "colab_type": "text"
      },
      "source": [
        "numerator = 1\n",
        "\n",
        "numerator = -1\n",
        "\n",
        "numerator = 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zn_mmGQiiVwU",
        "colab_type": "code",
        "outputId": "c560f520-877c-48ab-ef96-808235a4dc26",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "pioverfour = 0\n",
        "\n",
        "numerator = 1\n",
        "\n",
        "denominator = 1\n",
        "\n",
        "counter = 0\n",
        "\n",
        "precision = (math.pi - pioverfour*4)\n",
        "\n",
        "while abs(precision) > 0.0056:\n",
        "  pioverfour = pioverfour + numerator/denominator\n",
        "  numerator = -numerator\n",
        "  denominator += 2\n",
        "  precision = (math.pi - pioverfour*4)\n",
        "  counter += 1\n",
        "\n",
        "\n",
        "print(counter)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "179\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CSpPFaAgksVL",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "# Import necessary libraries\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "plt.style.use('ggplot')"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UrhgjAsek3OF",
        "colab_type": "code",
        "outputId": "04a2bccc-1b31-4481-fa9c-e0b1a7c20ec7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        }
      },
      "source": [
        "url = 'https://raw.githubusercontent.com/ArashVafa/ISTM660/master/oktoberfestgesamt19852018.csv'\n",
        "\n",
        "# Load data into a pandas dataframe\n",
        "df_oktoberfest = pd.read_csv(url)\n",
        "\n",
        "# Print first 5 rows of the dataframe\n",
        "df_oktoberfest.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>jahr</th>\n",
              "      <th>dauer</th>\n",
              "      <th>besucher_gesamt</th>\n",
              "      <th>besucher_tag</th>\n",
              "      <th>bier_preis</th>\n",
              "      <th>bier_konsum</th>\n",
              "      <th>hendl_preis</th>\n",
              "      <th>hendl_konsum</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1985</td>\n",
              "      <td>16</td>\n",
              "      <td>7.1</td>\n",
              "      <td>444</td>\n",
              "      <td>3.20</td>\n",
              "      <td>54541</td>\n",
              "      <td>4.77</td>\n",
              "      <td>629520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1986</td>\n",
              "      <td>16</td>\n",
              "      <td>6.7</td>\n",
              "      <td>419</td>\n",
              "      <td>3.30</td>\n",
              "      <td>53807</td>\n",
              "      <td>3.92</td>\n",
              "      <td>698137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1987</td>\n",
              "      <td>16</td>\n",
              "      <td>6.5</td>\n",
              "      <td>406</td>\n",
              "      <td>3.37</td>\n",
              "      <td>51842</td>\n",
              "      <td>3.98</td>\n",
              "      <td>732859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1988</td>\n",
              "      <td>16</td>\n",
              "      <td>5.7</td>\n",
              "      <td>356</td>\n",
              "      <td>3.45</td>\n",
              "      <td>50951</td>\n",
              "      <td>4.19</td>\n",
              "      <td>720139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1989</td>\n",
              "      <td>16</td>\n",
              "      <td>6.2</td>\n",
              "      <td>388</td>\n",
              "      <td>3.60</td>\n",
              "      <td>51241</td>\n",
              "      <td>4.22</td>\n",
              "      <td>775674</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   jahr  dauer  besucher_gesamt  ...  bier_konsum  hendl_preis  hendl_konsum\n",
              "0  1985     16              7.1  ...        54541         4.77        629520\n",
              "1  1986     16              6.7  ...        53807         3.92        698137\n",
              "2  1987     16              6.5  ...        51842         3.98        732859\n",
              "3  1988     16              5.7  ...        50951         4.19        720139\n",
              "4  1989     16              6.2  ...        51241         4.22        775674\n",
              "\n",
              "[5 rows x 8 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W4Bg10RqlHlA",
        "colab_type": "code",
        "outputId": "dde46428-13ec-4c8c-8a52-046b03880c33",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        }
      },
      "source": [
        "df_oktoberfest.info()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 34 entries, 0 to 33\n",
            "Data columns (total 8 columns):\n",
            " #   Column           Non-Null Count  Dtype  \n",
            "---  ------           --------------  -----  \n",
            " 0   jahr             34 non-null     int64  \n",
            " 1   dauer            34 non-null     int64  \n",
            " 2   besucher_gesamt  34 non-null     float64\n",
            " 3   besucher_tag     34 non-null     int64  \n",
            " 4   bier_preis       34 non-null     float64\n",
            " 5   bier_konsum      34 non-null     int64  \n",
            " 6   hendl_preis      34 non-null     float64\n",
            " 7   hendl_konsum     34 non-null     int64  \n",
            "dtypes: float64(3), int64(5)\n",
            "memory usage: 2.2 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bmheutsYlXY-",
        "colab_type": "code",
        "outputId": "4b42d04c-ce2c-45fd-bb36-f0266a832ddd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        }
      },
      "source": [
        "# Drop the column besucher_tag (visitors per day)\n",
        "df_oktoberfest.drop('besucher_tag', axis=1, inplace=True)\n",
        "\n",
        "# Translate  columns names into English\n",
        "german_to_english = {'jahr':'year', 'dauer':'duration', 'besucher_gesamt':'visitors_total', \n",
        "                    'bier_preis':'beer_price', 'bier_konsum':'beer_consumption', 'hendl_preis':'chicken_price',\n",
        "                    'hendl_konsum':'chicken_consumption'}\n",
        "df_oktoberfest.rename(columns=german_to_english, inplace=True)\n",
        "\n",
        "# Set year as the index of the data frame\n",
        "df_oktoberfest.set_index('year', inplace=True)\n",
        "\n",
        "# Visualize first 5 rows of the data frame\n",
        "df_oktoberfest.head()"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>visitors_total</th>\n",
              "      <th>beer_price</th>\n",
              "      <th>beer_consumption</th>\n",
              "      <th>chicken_price</th>\n",
              "      <th>chicken_consumption</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1985</th>\n",
              "      <td>16</td>\n",
              "      <td>7.1</td>\n",
              "      <td>3.20</td>\n",
              "      <td>54541</td>\n",
              "      <td>4.77</td>\n",
              "      <td>629520</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1986</th>\n",
              "      <td>16</td>\n",
              "      <td>6.7</td>\n",
              "      <td>3.30</td>\n",
              "      <td>53807</td>\n",
              "      <td>3.92</td>\n",
              "      <td>698137</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1987</th>\n",
              "      <td>16</td>\n",
              "      <td>6.5</td>\n",
              "      <td>3.37</td>\n",
              "      <td>51842</td>\n",
              "      <td>3.98</td>\n",
              "      <td>732859</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1988</th>\n",
              "      <td>16</td>\n",
              "      <td>5.7</td>\n",
              "      <td>3.45</td>\n",
              "      <td>50951</td>\n",
              "      <td>4.19</td>\n",
              "      <td>720139</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1989</th>\n",
              "      <td>16</td>\n",
              "      <td>6.2</td>\n",
              "      <td>3.60</td>\n",
              "      <td>51241</td>\n",
              "      <td>4.22</td>\n",
              "      <td>775674</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      duration  visitors_total  ...  chicken_price  chicken_consumption\n",
              "year                            ...                                    \n",
              "1985        16             7.1  ...           4.77               629520\n",
              "1986        16             6.7  ...           3.92               698137\n",
              "1987        16             6.5  ...           3.98               732859\n",
              "1988        16             5.7  ...           4.19               720139\n",
              "1989        16             6.2  ...           4.22               775674\n",
              "\n",
              "[5 rows x 6 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pWp_-yt0laco",
        "colab_type": "code",
        "outputId": "087650d3-7643-42f9-fa60-8d1480f18491",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 545
        }
      },
      "source": [
        "# Plot beer price and chicken price\n",
        "df_oktoberfest.plot(kind='line', y=['beer_price','chicken_price'], figsize=(15,8), linewidth=3, fontsize=16)\n",
        "\n",
        "# Title, labels and legend\n",
        "plt.legend(labels=['Beer price','Chicken price'],fontsize=16)\n",
        "plt.xlabel('Year',fontsize=16)\n",
        "plt.ylabel('Price (Euro)',fontsize=16)\n",
        "plt.title('Evolution of prices from 1985 until 2018',fontsize=20)"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Evolution of prices from 1985 until 2018')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 52
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1080x576 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2eGsLhBflicN",
        "colab_type": "code",
        "outputId": "4bc93d91-344e-4117-ced8-3553ead0ec52",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 542
        }
      },
      "source": [
        "import plotly.graph_objects as go\n",
        "\n",
        "# Interactive plots of the price of beer and chicken\n",
        "year = df_oktoberfest.index\n",
        "beer_price = df_oktoberfest.beer_price\n",
        "chicken_price = df_oktoberfest.chicken_price\n",
        "\n",
        "fig = go.Figure()\n",
        "\n",
        "fig.add_trace(go.Scatter(x=year, y=chicken_price,\n",
        "                    mode='lines+markers',\n",
        "                    name='Chicken'))\n",
        "\n",
        "fig.add_trace(go.Scatter(x=year, y=beer_price,\n",
        "                    mode='lines+markers',\n",
        "                    name='Beer'))\n",
        "\n",
        "# Title, labels, and background\n",
        "fig.update_layout(title='Evolution of prices from 1985 until 2018',\n",
        "                   xaxis_title='Year',\n",
        "                   yaxis_title='Price (Euro)',\n",
        "                   plot_bgcolor='white')"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"bf55a90e-b018-4c39-8007-a21b654eae50\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"bf55a90e-b018-4c39-8007-a21b654eae50\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        'bf55a90e-b018-4c39-8007-a21b654eae50',\n",
              "                        [{\"mode\": \"lines+markers\", \"name\": \"Chicken\", \"type\": \"scatter\", \"x\": [1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018], \"y\": [4.77, 3.92, 3.98, 4.19, 4.22, 4.47, 4.81, 5.11, 5.25, 5.39, 5.54, 5.45, 5.38, 5.34, 5.38, 7.85, 8.12, 8.1, 8.14, 8.28, 8.35, 8.5, 8.87, 9.06, 9.18, 9.6, 9.83, 10.07, 11.1, 10.49, 10.75, 11.0, 11.41, 11.67]}, {\"mode\": \"lines+markers\", \"name\": \"Beer\", \"type\": \"scatter\", \"x\": [1985, 1986, 1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018], \"y\": [3.2, 3.3, 3.37, 3.45, 3.6, 3.77, 4.21, 4.42, 4.71, 4.89, 5.15, 5.24, 5.45, 5.6, 5.8, 6.35, 6.47, 6.75, 6.75, 7.02, 7.15, 7.42, 7.85, 8.25, 8.53, 8.79, 9.09, 9.41, 9.78, 9.98, 10.27, 10.57, 10.87, 11.3]}],\n",
              "                        {\"plot_bgcolor\": \"white\", \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"title\": {\"text\": \"Evolution of prices from 1985 until 2018\"}, \"xaxis\": {\"title\": {\"text\": \"Year\"}}, \"yaxis\": {\"title\": {\"text\": \"Price (Euro)\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('bf55a90e-b018-4c39-8007-a21b654eae50');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f-k_ShkRlxpU",
        "colab_type": "text"
      },
      "source": [
        "Github\n",
        "\n",
        "\n",
        "API\n",
        "\n",
        "\n",
        "data scraping "
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "w8wjKqzIlspK",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}